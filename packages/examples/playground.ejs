<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <style>
      * { box-sizing: border-box; }
      body { width: 80%; margin: auto; font-family: sans-serif; }
      textarea { width: 100%; height: 130px; font-family: monospace; font-size: 16px; padding: 10px; }
      fieldset { border: 1px solid #555; line-height: 1.6rem; }
      fieldset button { font-family: monospace; }
      #result { border: 1px solid black; padding: 10px; font-family: monospace; }
      .wrapper { display: flex; gap: 12px; }
      .column { flex-direction: column; flex: 1; }
      @keyframes yellowfade { from { background: #ffa; } to { background: transparent; } }
      #result p { animation: yellowfade 1s; padding: 5px; margin: 0; }
    </style>
  </head>
  <body>
    <div class="wrapper">
      <div class="column">
        <h3>Header</h3>
        <textarea id="header" onkeyup="makeAccessToken()">
{
  "alg": "RS256",
  "typ": "JWT",
  "kid": "1"
}
        </textarea>
        <h3>Payload</h3>
        <textarea id="payload" style="height: 220px" onkeyup="makeAccessToken()">
{
  "iss": "<%= issuer %>",
  "sub": "me",
  "client_id": "client",
  "jti": "1",
  "aud": "<%= audience %>",
  "iat": <%= Date.now() / 1000 | 0 %>,
  "exp": <%= (Date.now() / 1000 | 0) + 86400 %>,
  "scope": "openid profile email"
}
        </textarea>
        <h3>Access Token</h3>
        <textarea id="at" style="height: 150px;"></textarea>
        <h3>DPoP Proof JWT <button style="float: right;" onclick="makeDPoPProofJwt()">re-generate</button></h3>
        <textarea id="dpop" style="height: 150px;"></textarea>
      </div>
      <div class="column">
        <h3>Test:</h3>
        <fieldset>
          <legend>Express</legend>
          <button onclick="request(3001, '/auth')">auth()</button>
        </fieldset>
        <h3>Log:</h3>
        <div id="result"></div>
        <textarea id="privateJwk" style="display: none;">
          <%= JSON.stringify(privateJwk, null, 2) %>
        </textarea>
        <textarea id="secret" style="display: none;">
          <%= secret %>
        </textarea>
      </div>
    </div>
    <script></script>
    <script type="module">
      import { SignJWT } from 'https://cdn.jsdelivr.net/npm/jose@latest/dist/browser/jwt/sign.js';
      import { parseJwk } from 'https://cdn.jsdelivr.net/npm/jose@latest/dist/browser/jwk/parse.js';
      import { exportJWK } from 'https://cdn.jsdelivr.net/npm/jose@latest/dist/browser/key/export.js';
      import { calculateJwkThumbprint } from 'https://cdn.jsdelivr.net/npm/jose@latest/dist/browser/jwk/thumbprint.js';

      import DPoP, { generateKeyPair } from 'https://cdn.jsdelivr.net/npm/dpop@latest';


      const result = document.querySelector('#result');
      const header = document.querySelector('#header');
      const payload = document.querySelector('#payload');
      const at = document.querySelector('#at');
      const privateJwk = document.querySelector('#privateJwk');
      const secret = document.querySelector('#secret');
      const dpop = document.querySelector('#dpop');
      let keyPair;

      const log = (msg) => {
        const item = document.createElement('p');
        item.innerText = `${new Date().toLocaleTimeString()} ${msg}`;
        result.prepend(item);
      };

      window.makeAccessToken = async () => {
        const privateKey = await parseJwk(JSON.parse(privateJwk.value), 'RS256');
        const symmetricSecret = (new TextEncoder()).encode(secret.value.trim());
        try {
          const head = JSON.parse(header.value);
          at.value = await new SignJWT(JSON.parse(payload.value))
            .setProtectedHeader(head)
            .sign(head.alg.startsWith('HS') ? symmetricSecret : privateKey);
          await makeDPoPProofJwt();
        } catch (e) {
          at.value = '';
          console.error(e);
        }
      };

      window.request = async (port, path) => {
        const url = `http://localhost:${port}${path}`;
        const accessToken = at.value.trim();
        const dPoPProofJwt = dpop.value.trim();

        const response = await fetch(url, {
          headers: {
            authorization: `DPoP ${accessToken}`,
            DPoP: dPoPProofJwt
          },
        });
        const header = response.headers.get('www-authenticate');
        if (response.ok) {
          log(`200 ${JSON.stringify(await response.json())}`);
        } else if (header) {
          const match = header.match(/scope="(.*?)"/);
          const scopes = match && ` '${match[1]}'` || '';
          log(
            `${response.status} ${header.match(/error_description="(.*?)"/)[1]}${scopes}`
          );
        } else {
          log('Unexpected error: check console');
        }
        // Create a new proof after each request
        await makeDPoPProofJwt();
      };

      window.makeDPoPProofJwt = async () => {
        const accessToken = at.value.trim();
        dpop.value = await DPoP(keyPair, `http://localhost:3001/auth`, 'GET', undefined, accessToken);
      }

      (async () => {
        (keyPair = await generateKeyPair('RS256'));
        const publicJwk = await exportJWK(keyPair.publicKey, 'RS256');
        const jkt = await calculateJwkThumbprint(publicJwk);
        payload.value = JSON.stringify({ ...JSON.parse(payload.value), cnf: { jkt } }, null, 2)

        makeAccessToken();
      })();
    </script>
  </body>
</html>
